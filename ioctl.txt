#include <linux/init.h> 

#include <linux/module.h> 

#include <linux/device.h> 

#include <linux/kernel.h> 

#include <linux/fs.h> 

#include <linux/ioctl.h>

#include <linux/ktheread.h>

#include <linux/delay.h>

#include <linux/wait.h>

#include "dev1.h" 



#define SUCCESS 0 

#define DEVICE_NAME "viktoria" 

#define BUF_LEN 256 



#define IOCTL_SET0_IO(MAGIC_NUM, 0)//установка сообщения драцвера устройства

//создаем номер команды  ioctl для передачи информации от пользователя к ядру

#define IOCTL_GET_IOR(MAGIC_NUM, 1, int *)//получение сообщения драйвера устройства





MODULE_LICENSE("GPL"); 



static int     dev_open(struct inode *, struct file *);

static int     dev_release(struct inode *, struct file *);

//static ssize_t dev_read(struct file *, char *, size_t, loff_t *);

//static ssize_t dev_write(struct file *, const char *, size_t, loff_t *);

static long    dev_ioctl(struct file *, unsigned int cmd, unsigned long arg); 

static int     numberOpens = 0; 

static int     counter = 0; //занести в поток

static struct  class*  devClass  = NULL; 

static struct  device* devDevice = NULL; 

static int     major; 



struct task_struct *ts;



int thread(void *data) {

	while(1) {

		counter++;

		msleep(100);

		if (kthread_should_stop())

			break;

	}

	return 0;

}





static struct file_operations fops =

{

	.open = dev_open,

	//.read = dev_read,

	//.write = dev_write,

	.unlocked_ioctl = dev_ioctl;

	.release = dev_release,

};



static int dev_open(struct inode *inodep, struct file *filep){

	numberOpens++;

	printk(KERN_INFO "Device has been opened %d time(s)\n", numberOpens);

	//try_module_get(THIS_MODULE);

	return 0;

}



static int __init dev_init(void){

	printk(KERN_INFO "Initializing the EBBChar LKM\n");

 	ts = kthread_run(thread,NULL,"foo kthread");

	major = register_chrdev(0, DEVICE_NAME, &fops);

	if (major<0){

		printk(KERN_ALERT "Registering char device failed with %d\n", major);

		return major;

	}

	printk(KERN_INFO "Registered correctly with major number %d\n", major);

 

   

	devClass = class_create(THIS_MODULE, CLASS_NAME);

	if (IS_ERR(devClass)){               

		unregister_chrdev(major, DEVICE_NAME);

		printk(KERN_ALERT "Failed to register device class\n");

		return PTR_ERR(devClass);          

	}

	printk(KERN_INFO "Device class registered correctly\n");

 

	devDevice = device_create(devClass, NULL, MKDEV(major, 0), NULL, DEVICE_NAME);

	if (IS_ERR(devClass)){               

		class_destroy(devClass);           

		unregister_chrdev(major, DEVICE_NAME);

		printk(KERN_ALERT "Failed to create the device\n");

		return PTR_ERR(devClass);

	}

	printk(KERN_INFO "Device class created correctly\n"); 

	return 0;

}





static long dev_ioctl(struct file *filep, unsigned int cmd, unsigned int arg)

{

	switch(cmd) 

	{

		case IOCTL_SET0:

			counter = 0;

			break;

		case IOCTL_GET:

			copy_to_user((int*) arg, &counter, sizeof(int));

			break;

	}

	return 0;

}



static void __exit dev_exit(void){	

	kthread_stop(ts);

	device_destroy(devClass, MKDEV(major, 0));     

	class_unregister(devClass);                          

	class_destroy(devClass);                             

	unregister_chrdev(major, DEVICE_NAME);             

	printk(KERN_INFO "Goodbye from the LKM!\n");

}

 



static int dev_release(struct inode *inodep, struct file *filep){

	numberOpens--;

	printk(KERN_INFO "Device successfully closed\n");

	return 0;

}



module_init(dev_init);

module_exit(dev_exit);