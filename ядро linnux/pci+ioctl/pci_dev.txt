#include <linux/init.h>
#include <linux/module.h>
#include <linux/pci.h>
#include <linux/kernel.h>
#include <linux/fs.h>
#include <asm/uaccess.h>
#include <linux/wait.h>
#include <linux/ioctl.h>
#include <linux/kthread.h>
#include <linux/delay.h>                
#include <linux/device.h>
#include "dev2.h"

#define  DEVICE_NAME "viktoria"    
#define  CLASS_NAME  "vik"
#define sd 64

MODULE_LICENSE("GPL");

static struct pci_device_id my_driver_id_table[] = {
	{PCI_DEVICE(0x8086, 0x100e)},//vendor_id  device_id
	{0,}
};

MODULE_DEVICE_TABLE(pci, my_driver_id_table);

static unsigned int port_addr;
static unsigned int dev_size;
static unsigned char* dev_virtual;
static int major;                                                
static struct class* devClass  = NULL; 
static struct device* devDevice = NULL; 

static int my_driver_probe(struct pci_dev *, const struct pci_device_id *);
static void my_driver_remove(struct pci_dev *);
static long dev_ioctl( struct file *, unsigned int cmd, unsigned long arg);

static struct pci_driver my_pci_driver = {
	.name = DEVICE_NAME,
	.id_table = my_driver_id_table,
	.probe = my_driver_probe,
	.remove = my_driver_remove
};

/*static struct file_operations fops =
{
        .open = dev_open,   
        .unlocked_ioctl = dev_ioctl,
        .release = dev_release,
};*/

static int __init my_init_module(void) {
	major = register_chrdev(0, DEVICE_NAME, &fops); 
	if (major<0){
	printk(KERN_ALERT "Registering char device failed with %d\n", major);
	return major;
	}
	printk(KERN_INFO "Registered correctly with major number %d\n", major);

	devClass = class_create(THIS_MODULE, CLASS_NAME);
	if (IS_ERR(devClass)){                
	unregister_chrdev(major, DEVICE_NAME);
	printk(KERN_ALERT "Failed to register device class\n");
	return PTR_ERR(devClass);          
	}
	printk(KERN_INFO "Device class registered correctly\n");

	devDevice = device_create(devClass, NULL, MKDEV(Major, 0), NULL, DEVICE_NAME);
	if (IS_ERR(devDevice)){               
	class_destroy(devClass);           
	unregister_chrdev(major, DEVICE_NAME);
	printk(KERN_ALERT "Failed to create the device\n");
	return PTR_ERR(devDevice);
	}
	printk(KERN_INFO "Device class created correctly\n"); 
	
	printk(KERN_INFO "Init\n");
	return pci_register_driver(&my_pci_driver);
}

static void __exit my_cleanup_module(void) {
	
	device_destroy(devClass, MKDEV(major, 0));     
	class_unregister(devClass);                         
	class_destroy(devClass);                           
	unregister_chrdev(major, DEVICE_NAME);
	printk(KERN_INFO "Exit\n");
	pci_unregister_driver(&my_pci_driver);
}

static long dev_ioctl(struct file *filep,  unsigned int cmd, unsigned long arg)
{
   switch (cmd)
   {
   	case IOCTL_GET_MSG:
   		unsigned int data = 0;
   		data = ioread8(&dev_virtual[sd]);
            	if(data == 0x08)
        	{
           		pr_info("data: %02x:%02x:%02x:%02x:%02x:%02x\n", 
            		(unsigned int)data,//
            		(unsigned int)ioread8(&dev_virtual[sd+1]),
            		(unsigned int)ioread8(&dev_virtual[sd+2]),
            		(unsigned int)ioread8(&dev_virtual[sd+3]),
            		(unsigned int)ioread8(&dev_virtual[sd+4]),
            		(unsigned int)ioread8(&dev_virtual[sd+5]));
            		break;
        	}
        	break;
   }
   return 0;
}

int my_driver_probe(struct pci_dev *dev, const struct pci_device_id *id) {
	//unsigned int i = 0;
	//unsigned int data = 0;
	port_addr = pci_resource_start(dev,0);
	dev_size = pci_resource_len(dev,0);
	dev_virtual=ioremap(port_addr,dev_size);
	/*printk(KERN_INFO "%lu ", dev_size);
	while(i < dev_size)
        {
            data = ioread8(&dev_virtual[i]);
            if(data == 0x08)
        {
            pr_info("data: %02x:%02x:%02x:%02x:%02x:%02x\n", 
            (unsigned int)data,//
            (unsigned int)ioread8(&dev_virtual[i+1]),
            (unsigned int)ioread8(&dev_virtual[i+2]),
            (unsigned int)ioread8(&dev_virtual[i+3]),
            (unsigned int)ioread8(&dev_virtual[i+4]),
            (unsigned int)ioread8(&dev_virtual[i+5]));
            pr_info("i = %d\n", i);
            break;
        }
        i++;
        }*/
	
	printk(KERN_INFO "Loaded\n");
	return 0;
}

void my_driver_remove(struct pci_dev *dev) {
	printk(KERN_INFO "Removed\n");
}

module_init(my_init_module);
module_exit(my_cleanup_module);
